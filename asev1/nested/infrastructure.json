{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "deploymentId": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]"
    },
    "deployVNet": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": [
        "Yes",
        "No - use an existing VNet"
      ]
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "cm.ase.location": {
      "type": "string",
      "defaultValue": "North Europe"
    },
    "cd.ase.location": {
      "type": "string",
      "defaultValue": "East US"
    },
    "cm.hostingplan.name": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-cm-hp')]"
    },
    "cd.hostingplan.name": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-cd-hp')]"
    },
    "cm.webapp.name": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-cm')]"
    },
    "cd.webapp.name": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-cd')]"
    },
    "cdn.name": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-cdn')]"
    },
    "cdn.endpointname": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-cdn-endpoint')]"
    },
    "cdn.endpointoriginname": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-cdn-endpoint-origin')]"
    },
    "sqlserver.name": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-sql')]"
    },
    "sqlserver.login": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "aamsql"
    },
    "sqlserver.password": {
      "type": "securestring",
      "minLength": 8,
      "defaultValue": "SqlAAM#1"
    },
    "web.sqlserver.name": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-web-sql')]"
    },
    "web.sqlserver.login": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[parameters('sqlserver.login')]"
    },
    "web.sqlserver.password": {
      "type": "securestring",
      "minLength": 8,
      "defaultValue": "[parameters('sqlserver.password')]"
    },
    "core.sqldatabase.name": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-core-db')]"
    },
    "master.sqldatabase.name": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-master-db')]"
    },
    "web.sqldatabase.name": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-web-db')]"
    },
    "searchservice.name": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-as')]"
    },
    "rediscache.name": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-redis')]"
    },
    "applicationinsights.name": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-ai')]"
    },
    "applicationinsights.location": {
      "type": "string",
      "defaultValue": "North Europe",
      "allowedValues": [
        "East US",
        "South Central US",
        "North Europe",
        "West Europe"
      ]
    },
    "cm.hostingplan.skuname": {
      "type": "string",
      "defaultValue": "P3"
    },
    "cm.hostingplan.skucapacity": {
      "type": "int",
      "defaultValue": 1
    },
    "cd.hostingplan.skuname": {
      "type": "string",
      "defaultValue": "P3"
    },
    "cd.hostingplan.skucapacity": {
      "type": "int",
      "defaultValue": 1
    },
    "searchservice.skuname": {
      "type": "string",
      "defaultValue": "Standard"
    },
    "sqlserver.version": {
      "type": "string",
      "defaultValue": "12.0"
    },
    "sqldatabase.collation": {
      "type": "string",
      "defaultValue": "SQL_Latin1_General_CP1_CI_AS"
    },
    "sqldatabase.edition": {
      "type": "string",
      "defaultValue": "Standard"
    },
    "sqldatabase.maxsize": {
      "type": "string",
      "defaultValue": "268435456000"
    },
    "sqldatabase.serviceobjectivelevel": {
      "type": "string",
      "defaultValue": "S3"
    },
    "searchservice.replicacount": {
      "type": "int",
      "defaultValue": 1
    },
    "searchservice.partitioncount": {
      "type": "int",
      "defaultValue": 1
    },
    "rediscache.skuname": {
      "type": "string",
      "defaultValue": "Standard"
    },
    "rediscache.skufamily": {
      "type": "string",
      "defaultValue": "C"
    },
    "rediscache.skucapacity": {
      "type": "string",
      "defaultValue": "1"
    },
    "sitecoreTags": {
      "type": "object",
      "defaultValue": {
        "provider": "b51535c2-ab3e-4a68-95f8-e2e3c9a19299"
      }
    },
    "trafficManagerName": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-tm')]"
    },
    "trafficManagerHostName": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-tmr.trafficmanager.net')]"
    },
    "trafficManagerRelativeName": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-tmr')]"
    },
    "trafficRoutingMethod": {
      "type": "string",
      "defaultValue": "Performance",
      "allowedValues": [
        "Performance",
        "Weighted",
        "Priority",
        "Geographic"
      ]
    },
    "cmipSslAddressCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The number of IP Addresses to create for the environment"
      }
    },
    "cdipSslAddressCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The number of IP Addresses to create for the environment"
      }
    },
    "cmworker1Size": {
      "type": "string",
      "defaultValue": "medium",
      "allowedValues": [
        "small",
        "medium",
        "large"
      ],
      "metadata": {
        "description": "The size of VM to use for CM Worker Pool 1"
      }
    },
    "cdworker1Size": {
      "type": "string",
      "defaultValue": "medium",
      "allowedValues": [
        "small",
        "medium",
        "large"
      ],
      "metadata": {
        "description": "The size of VM to use for CD Worker Pool 1"
      }
    },
    "cmworker1count": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The number of VM to use for CM Worker Pool 1"
      }
    },
    "cdworker1count": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The number of VM to use for CD Worker Pool 1"
      }
    },
    "cmworker2Size": {
      "type": "string",
      "defaultValue": "medium",
      "allowedValues": [
        "small",
        "medium",
        "large"
      ],
      "metadata": {
        "description": "The size of VM to use for CM Worker Pool 2"
      }
    },
    "cdworker2Size": {
      "type": "string",
      "defaultValue": "medium",
      "allowedValues": [
        "small",
        "medium",
        "large"
      ],
      "metadata": {
        "description": "The size of VM to use for CD Worker Pool 2"
      }
    },
    "cmworker2count": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The number of VM to use for CM Worker Pool 2"
      }
    },
    "cdworker2count": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The number of VM to use for CD Worker Pool 2"
      }
    },
    "cmfrontendSize": {
      "type": "string",
      "defaultValue": "medium",
      "allowedValues": [
        "small",
        "medium",
        "large"
      ],
      "metadata": {
        "description": "The size of VM to use for CM FrontEnd Pool"
      }
    },
    "cdfrontendSize": {
      "type": "string",
      "defaultValue": "medium",
      "allowedValues": [
        "small",
        "medium",
        "large"
      ],
      "metadata": {
        "description": "The size of VM to use for CD FrontEnd Pool"
      }
    },
    "cmfrontendCount": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The number of VM to use for CM FrontEnd Pool"
      }
    },
    "cdfrontendCount": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The number of VM to use for CD FrontEnd Pool"
      }
    },
    "cmworker3Size": {
      "type": "string",
      "defaultValue": "large",
      "allowedValues": [
        "small",
        "medium",
        "large"
      ],
      "metadata": {
        "description": "The size of VM to use for CM Worker Pool 3"
      }
    },
    "cdworker3Size": {
      "type": "string",
      "defaultValue": "large",
      "allowedValues": [
        "small",
        "medium",
        "large"
      ],
      "metadata": {
        "description": "The size of VM to use for CD Worker Pool 3"
      }
    },
    "cmworker3count": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The number of VM to use for CM Worker Pool 3"
      }
    },
    "cdworker3count": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The number of VM to use for CD Worker Pool 3"
      }
    },
    "cmvnetName": {
      "type": "string",
      "defaultValue": "cmvnetName",
      "metadata": {
        "description": "The name of the VNET onto which to deploy the CM environment"
      }
    },
    "cdvnetName": {
      "type": "string",
      "defaultValue": "cdvnetName",
      "metadata": {
        "description": "The name of the VNET onto which to deploy the CD environment"
      }
    },
    "cmvnetResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "The name of the Resource Group to which the VNET for CM has been deployed"
      }
    },
    "cdvnetResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "The name of the Resource Group to which the VNET for CD has been deployed"
      }
    },
    "cmsubnetName": {
      "type": "string",
      "defaultValue": "cmsubnetName",
      "metadata": {
        "description": "The name of the Subnet onto which to deploy the CM environment"
      }
    },
    "cdsubnetName": {
      "type": "string",
      "defaultValue": "cdsubnetName",
      "metadata": {
        "description": "The name of the Subnet onto which to deploy the CD environment"
      }
    },
    "serverFarmWorkerSize": {
      "type": "string",
      "allowedValues": [
        "small",
        "medium",
        "large"
      ],
      "defaultValue": "medium",
      "metadata": {
        "description": "The size of the AppService Plan worker VMs"
      }
    },
    "cmappServiceEnvironmentName": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-cmase1x')]",
      "metadata": {
        "description": "The name of the CM App Service Environment where the app service plan will be created."
      }
    },
    "cdappServiceEnvironmentName": {
      "type": "string",
      "defaultValue": "[concat(parameters('deploymentId'), '-cdase1x')]",
      "metadata": {
        "description": "The name of the CD App Service Environment where the app service plan will be created."
      }
    },
    "sitecoreSKU": {
      "type": "string",
      "defaultValue": "xM1",
      "allowedValues": [
        "xM1",
        "xM2",
        "xM3",
        "xM4",
        "xM5"
      ],
      "metadata": {
        "description": "Sitecore SKU controls the sizes and service levels of the provisioned resources"
      }
    },
    "skuMap": {
      "type": "secureObject",
      "defaultValue": {
        "xM1": {
          "CmHostingPlan": {
            "SkuName": "[parameters('cm.hostingplan.skuname')]",
            "SkuCapacity": "[parameters('cm.hostingplan.skucapacity')]"
          },
          "CdHostingPlan": {
            "SkuName": "[parameters('cd.hostingplan.skuname')]",
            "SkuCapacity": "[parameters('cd.hostingplan.skucapacity')]"
          },
          "CoreSqlDatabase": {
            "Edition": "[parameters('sqldatabase.edition')]",
            "MaxSize": "[parameters('sqldatabase.maxsize')]",
            "ServiceObjectiveLevel": "[parameters('sqldatabase.serviceobjectivelevel')]"
          },
          "MasterSqlDatabase": {
            "Edition": "[parameters('sqldatabase.edition')]",
            "MaxSize": "[parameters('sqldatabase.maxsize')]",
            "ServiceObjectiveLevel": "[parameters('sqldatabase.serviceobjectivelevel')]"
          },
          "WebSqlDatabase": {
            "Edition": "[parameters('sqldatabase.edition')]",
            "MaxSize": "[parameters('sqldatabase.maxsize')]",
            "ServiceObjectiveLevel": "[parameters('sqldatabase.serviceobjectivelevel')]"
          },
          "Searchservice": {
            "SkuName": "[parameters('searchservice.skuname')]",
            "Partitions": "[parameters('searchservice.partitioncount')]",
            "Replicas": "[parameters('searchservice.replicacount')]"
          },
          "RedisCache": {
            "SkuName": "[parameters('rediscache.skuname')]",
            "SkuFamily": "[parameters('rediscache.skufamily')]",
            "SkuCapacity": "[int(parameters('rediscache.skucapacity'))]"
          }
        },
        "xM2": {
          "CmHostingPlan": {
            "SkuName": "B2",
            "SkuCapacity": 1
          },
          "CdHostingPlan": {
            "SkuName": "B2",
            "SkuCapacity": 2
          },
          "CoreSqlDatabase": {
            "Edition": "Standard",
            "MaxSize": "268435456000",
            "ServiceObjectiveLevel": "S1"
          },
          "MasterSqlDatabase": {
            "Edition": "Standard",
            "MaxSize": "268435456000",
            "ServiceObjectiveLevel": "S1"
          },
          "WebSqlDatabase": {
            "Edition": "Standard",
            "MaxSize": "268435456000",
            "ServiceObjectiveLevel": "S1"
          },
          "Searchservice": {
            "SkuName": "Standard",
            "Partitions": 1,
            "Replicas": 1
          },
          "RedisCache": {
            "SkuName": "Standard",
            "SkuFamily": "C",
            "SkuCapacity": 1
          }
        },
        "xM3": {
          "CmHostingPlan": {
            "SkuName": "B2",
            "SkuCapacity": 1
          },
          "CdHostingPlan": {
            "SkuName": "B2",
            "SkuCapacity": 3
          },
          "CoreSqlDatabase": {
            "Edition": "Standard",
            "MaxSize": "268435456000",
            "ServiceObjectiveLevel": "S1"
          },
          "MasterSqlDatabase": {
            "Edition": "Standard",
            "MaxSize": "268435456000",
            "ServiceObjectiveLevel": "S1"
          },
          "WebSqlDatabase": {
            "Edition": "Standard",
            "MaxSize": "268435456000",
            "ServiceObjectiveLevel": "S1"
          },
          "Searchservice": {
            "SkuName": "Standard",
            "Partitions": 1,
            "Replicas": 1
          },
          "RedisCache": {
            "SkuName": "Standard",
            "SkuFamily": "C",
            "SkuCapacity": 1
          }
        },
        "xM4": {
          "CmHostingPlan": {
            "SkuName": "B2",
            "SkuCapacity": 1
          },
          "CdHostingPlan": {
            "SkuName": "S3",
            "SkuCapacity": 4
          },
          "CoreSqlDatabase": {
            "Edition": "Standard",
            "MaxSize": "268435456000",
            "ServiceObjectiveLevel": "S1"
          },
          "MasterSqlDatabase": {
            "Edition": "Standard",
            "MaxSize": "268435456000",
            "ServiceObjectiveLevel": "S1"
          },
          "WebSqlDatabase": {
            "Edition": "Standard",
            "MaxSize": "268435456000",
            "ServiceObjectiveLevel": "S2"
          },
          "Searchservice": {
            "SkuName": "Standard",
            "Partitions": 1,
            "Replicas": 1
          },
          "RedisCache": {
            "SkuName": "Standard",
            "SkuFamily": "C",
            "SkuCapacity": 1
          }
        },
        "xM5": {
          "CmHostingPlan": {
            "SkuName": "B2",
            "SkuCapacity": 1
          },
          "CdHostingPlan": {
            "SkuName": "S3",
            "SkuCapacity": 8
          },
          "CoreSqlDatabase": {
            "Edition": "Standard",
            "MaxSize": "268435456000",
            "ServiceObjectiveLevel": "S1"
          },
          "MasterSqlDatabase": {
            "Edition": "Standard",
            "MaxSize": "268435456000",
            "ServiceObjectiveLevel": "S1"
          },
          "WebSqlDatabase": {
            "Edition": "Standard",
            "MaxSize": "268435456000",
            "ServiceObjectiveLevel": "S3"
          },
          "Searchservice": {
            "SkuName": "Standard",
            "Partitions": 1,
            "Replicas": 1
          },
          "RedisCache": {
            "SkuName": "Standard",
            "SkuFamily": "C",
            "SkuCapacity": 1
          }
        }
      }
    },
    "resourceSizes": {
      "type": "object",
      "defaultValue": "[parameters('skuMap')[parameters('sitecoreSKU')]]"
    }


  },
  "variables": {
    "webApiVersion": "2016-08-01",
    "serverFarmApiVersion": "2016-09-01",
    "dbApiVersion": "2014-04-01-preview",
    "searchApiVersion": "2015-08-19",
    "redisApiVersion": "2016-04-01",
    "appInsightsApiVersion": "2015-05-01",
    "aseApiVersion": "2015-08-01",
    "vnetApiVersion": "2015-06-15",
    "cmHostingPlanNameTidy": "[toLower(trim(parameters('cm.hostingplan.name')))]",
    "cdHostingPlanNameTidy": "[toLower(trim(parameters('cd.hostingplan.name')))]",
    "cmWebAppNameTidy": "[toLower(trim(parameters('cm.webapp.name')))]",
    "cdWebAppNameTidy": "[toLower(trim(parameters('cd.webapp.name')))]",
    "dbServerNameTidy": "[toLower(trim(parameters('sqlserver.name')))]",
    "webDbServerNameTidy": "[toLower(trim(parameters('web.sqlserver.name')))]",
    "coreDbNameTidy": "[toLower(trim(parameters('core.sqldatabase.name')))]",
    "webDbNameTidy": "[toLower(trim(parameters('web.sqldatabase.name')))]",
    "masterDbNameTidy": "[toLower(trim(parameters('master.sqldatabase.name')))]",
    "searchServiceNameTidy": "[toLower(trim(parameters('searchservice.name')))]",
    "redisCacheNameTidy": "[toLower(trim(parameters('rediscache.name')))]",
    "appInsightsNameTidy": "[toLower(trim(parameters('applicationinsights.name')))]",
    "endpointName": "[toLower(trim(parameters('cdn.endpointname')))]",
    "profileName": "[toLower(trim(parameters('cdn.name')))]",
    "originName": "[toLower(trim(parameters('cdn.endpointoriginname')))]",
    "trafficManagerHostName": "[toLower(trim(parameters('trafficManagerHostName')))]"
  },
  "resources": [
    {
      "condition": "[equals(parameters('deployVNet'),'Yes')]",
      "name": "[parameters('cmvnetName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[parameters('cm.ase.Location')]",
      "apiVersion": "[variables('vnetApiVersion')]",
      "dependsOn": [],
      "tags": {
        "displayName": "ASE-VNET"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
          ]
        },
        "subnets": [
          {
            "name": "[parameters('cmsubnetName')]",
            "properties": {
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('deployVNet'),'Yes')]",
      "name": "[parameters('cdvnetName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[parameters('cd.ase.Location')]",
      "apiVersion": "[variables('vnetApiVersion')]",
      "dependsOn": [],
      "tags": {
        "displayName": "ASE-VNET"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
          ]
        },
        "subnets": [
          {
            "name": "[parameters('cdsubnetName')]",
            "properties": {
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('aseApiVersion')]",
      "name": "[parameters('cmappServiceEnvironmentName')]",
      "type": "Microsoft.Web/hostingEnvironments",
      "location": "[parameters('cm.ase.Location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('cmvnetName'))]"
      ],
      "properties": {
        "name": "[parameters('cmappServiceEnvironmentName')]",
        "ipSslAddressCount": "[parameters('cmipSslAddressCount')]",
        "workerPools": [
          {
            "workerSizeId": 0,
            "workerSize": "[parameters('cmworker1Size')]",
            "workerCount": "[parameters('cmworker1count')]"
          },
          {
            "workerSizeId": 1,
            "workerSize": "[parameters('cmworker2Size')]",
            "workerCount": "[parameters('cmworker2count')]"
          },
          {
            "workerSizeId": 2,
            "workerSize": "[parameters('cmworker3Size')]",
            "workerCount": "[parameters('cmworker3count')]"
          }
        ],
        "location": "[parameters('cm.ase.Location')]",
        "MultiSize": "[parameters('cmfrontendSize')]",
        "MultiRoleCount": "[parameters('cmfrontendCount')]",
        "virtualNetwork": {
          "Id": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',parameters('cmVNetResourceGroupName'),'/providers/Microsoft.Network/virtualNetworks/', parameters('cmvnetName'))]",
          "Subnet": "[parameters('cmSubnetName')]"
        }
      }
    },
    {
      "apiVersion": "[variables('aseApiVersion')]",
      "name": "[parameters('cdappServiceEnvironmentName')]",
      "type": "Microsoft.Web/hostingEnvironments",
      "location": "[parameters('cd.ase.Location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('cdvnetName'))]"
      ],
      "properties": {
        "name": "[parameters('cdappServiceEnvironmentName')]",
        "ipSslAddressCount": "[parameters('cdipSslAddressCount')]",
        "workerPools": [
          {
            "workerSizeId": 0,
            "workerSize": "[parameters('cdworker1Size')]",
            "workerCount": "[parameters('cdworker1count')]"
          },
          {
            "workerSizeId": 1,
            "workerSize": "[parameters('cdworker2Size')]",
            "workerCount": "[parameters('cdworker2count')]"
          },
          {
            "workerSizeId": 2,
            "workerSize": "[parameters('cdworker3Size')]",
            "workerCount": "[parameters('cdworker3count')]"
          }
        ],
        "location": "[parameters('cd.ase.Location')]",
        "MultiSize": "[parameters('cdfrontendSize')]",
        "MultiRoleCount": "[parameters('cdfrontendCount')]",
        "virtualNetwork": {
          "Id": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',parameters('cdVNetResourceGroupName'),'/providers/Microsoft.Network/virtualNetworks/', parameters('cdvnetName'))]",
          "Subnet": "[parameters('cdSubnetName')]"
        }
      }
    },
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "[variables('dbApiVersion')]",
      "properties": {
        "administratorLogin": "[parameters('sqlserver.login')]",
        "administratorLoginPassword": "[parameters('sqlserver.password')]",
        "version": "[parameters('sqlserver.version')]"
      },
      "name": "[variables('dbServerNameTidy')]",
      "location": "[parameters('location')]",
      "tags": {
        "provider": "[parameters('sitecoreTags').provider]"
      },
      "resources": [
        {
          "type": "firewallrules",
          "apiVersion": "[variables('dbApiVersion')]",
          "properties": {
            "endIpAddress": "0.0.0.0",
            "startIpAddress": "0.0.0.0"
          },
          "name": "AllowAllWindowsAzureIps",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('dbServerNameTidy'))]"
          ]
        },
        {
          "type": "databases",
          "apiVersion": "[variables('dbApiVersion')]",
          "properties": {
            "edition": "[parameters('resourceSizes').CoreSqlDatabase.Edition]",
            "collation": "[parameters('sqldatabase.collation')]",
            "maxSizeBytes": "[parameters('resourceSizes').CoreSqlDatabase.MaxSize]",
            "requestedServiceObjectiveName": "[parameters('resourceSizes').CoreSqlDatabase.ServiceObjectiveLevel]"
          },
          "name": "[variables('coreDbNameTidy')]",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('dbServerNameTidy'))]"
          ],
          "tags": {
            "provider": "[parameters('sitecoreTags').provider]"
          }
        },
        {
          "type": "databases",
          "apiVersion": "[variables('dbApiVersion')]",
          "properties": {
            "edition": "[parameters('resourceSizes').MasterSqlDatabase.Edition]",
            "collation": "[parameters('sqldatabase.collation')]",
            "maxSizeBytes": "[parameters('resourceSizes').MasterSqlDatabase.MaxSize]",
            "requestedServiceObjectiveName": "[parameters('resourceSizes').MasterSqlDatabase.ServiceObjectiveLevel]"
          },
          "name": "[variables('masterDbNameTidy')]",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('dbServerNameTidy'))]"
          ],
          "tags": {
            "provider": "[parameters('sitecoreTags').provider]"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "[variables('dbApiVersion')]",
      "properties": {
        "administratorLogin": "[parameters('web.sqlserver.login')]",
        "administratorLoginPassword": "[parameters('web.sqlserver.password')]",
        "version": "[parameters('sqlserver.version')]"
      },
      "name": "[variables('webDbServerNameTidy')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('dbServerNameTidy'))]"
      ],
      "tags": {
        "provider": "[parameters('sitecoreTags').provider]"
      },
      "resources": [
        {
          "type": "firewallrules",
          "apiVersion": "[variables('dbApiVersion')]",
          "properties": {
            "endIpAddress": "0.0.0.0",
            "startIpAddress": "0.0.0.0"
          },
          "name": "AllowAllWindowsAzureIps",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('webDbServerNameTidy'))]"
          ]
        },
        {
          "type": "databases",
          "apiVersion": "[variables('dbApiVersion')]",
          "properties": {
            "edition": "[parameters('resourceSizes').WebSqlDatabase.Edition]",
            "collation": "[parameters('sqldatabase.collation')]",
            "maxSizeBytes": "[parameters('resourceSizes').WebSqlDatabase.MaxSize]",
            "requestedServiceObjectiveName": "[parameters('resourceSizes').WebSqlDatabase.ServiceObjectiveLevel]"
          },
          "name": "[variables('webDbNameTidy')]",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('webDbServerNameTidy'))]"
          ],
          "tags": {
            "provider": "[parameters('sitecoreTags').provider]"
          }
        }
      ]
    },

    {
      "type": "Microsoft.Cache/Redis",
      "name": "[variables('redisCacheNameTidy')]",
      "apiVersion": "[variables('redisApiVersion')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "[parameters('resourceSizes').RedisCache.SkuName]",
          "family": "[parameters('resourceSizes').RedisCache.SkuFamily]",
          "capacity": "[parameters('resourceSizes').RedisCache.SkuCapacity]"
        },
        "enableNonSslPort": false
      },
      "dependsOn": [],
      "tags": {
        "provider": "[parameters('sitecoreTags').provider]"
      }
    },
    {
      "type": "Microsoft.Insights/Components",
      "name": "[variables('appInsightsNameTidy')]",
      "apiVersion": "[variables('appInsightsApiVersion')]",
      "location": "[parameters('applicationinsights.location')]",
      "properties": {
        "ApplicationId": "[variables('appInsightsNameTidy')]",
        "Application_Type": "web"
      },
      "tags": {
        "provider": "[parameters('sitecoreTags').provider]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "name": "[variables('cmHostingPlanNameTidy')]",
      "apiVersion": "[variables('serverFarmApiVersion')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/hostingEnvironments/', parameters('cmappServiceEnvironmentName'))]"
      ],
      "kind": "app",
      "sku": {
        "name": "[parameters('resourceSizes').CmHostingPlan.SkuName]",
        "capacity": "[parameters('resourceSizes').CmHostingPlan.SkuCapacity]",
        "family": "P",
        "size": "P3",
        "tier": "Premium"
      },
      "properties": {
        "name": "[variables('cmHostingPlanNameTidy')]",
        "numberOfWorkers": 1,
        "workerSize": "[parameters('ServerFarmWorkerSize')]",
        "hostingEnvironment": "[parameters('cmappServiceEnvironmentName')]",
        "hostingEnvironmentId": "[resourceId('Microsoft.Web/hostingEnvironments', parameters('cmappServiceEnvironmentName'))]"
      },
      "location": "[parameters('cm.ase.Location')]",
      "tags": {
        "provider": "[parameters('sitecoreTags').provider]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "name": "[variables('cdHostingPlanNameTidy')]",
      "apiVersion": "[variables('serverFarmApiVersion')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/hostingEnvironments/', parameters('cdappServiceEnvironmentName'))]"
      ],
      "kind": "app",
      "sku": {
        "name": "[parameters('resourceSizes').CdHostingPlan.SkuName]",
        "capacity": "[parameters('resourceSizes').CdHostingPlan.SkuCapacity]",
        "family": "P",
        "size": "P3",
        "tier": "Premium"
      },
      "properties": {
        "name": "[variables('cdHostingPlanNameTidy')]",
        "numberOfWorkers": 1,
        "worker1Size": "[parameters('ServerFarmWorkerSize')]",
        "hostingEnvironment": "[parameters('cdappServiceEnvironmentName')]",
        "hostingEnvironmentId": "[resourceId('Microsoft.Web/hostingEnvironments', parameters('cdappServiceEnvironmentName'))]"
      },
      "location": "[parameters('cd.ase.location')]",
      "tags": {
        "provider": "[parameters('sitecoreTags').provider]"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "name": "[variables('cmWebAppNameTidy')]",
      "apiVersion": "[variables('webApiVersion')]",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('cmHostingPlanNameTidy'))]",
        "siteConfig": {
          "use32BitWorkerProcess": false,
          "alwaysOn": true,
          "phpVersion": "",
          "defaultDocuments": [
            "index.html"
          ]
        }
      },
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/hostingEnvironments/', parameters('cmappServiceEnvironmentName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('cmHostingPlanNameTidy'))]"
      ],
      "tags": {
        "provider": "[parameters('sitecoreTags').provider]"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "name": "[variables('cdWebAppNameTidy')]",
      "apiVersion": "[variables('webApiVersion')]",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('cdHostingPlanNameTidy'))]",
        "siteConfig": {
          "use32BitWorkerProcess": false,
          "alwaysOn": true,
          "phpVersion": "",
          "defaultDocuments": [
            "index.html"
          ]
        }
      },
      "location": "[parameters('cd.ase.location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/hostingEnvironments/', parameters('cdappServiceEnvironmentName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('cdHostingPlanNameTidy'))]"
      ],
      "tags": {
        "provider": "[parameters('sitecoreTags').provider]"
      }
    },
    {
      "name": "[variables('profileName')]",
      "type": "Microsoft.Cdn/profiles",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-04-02",
      "sku": {
        "name": "Standard_Akamai"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/trafficmanagerprofiles', parameters('trafficManagerName'))]"
      ],
      "tags": {
        "displayName": "[variables('profileName')]"
      },
      "resources": [
        {
          "name": "[variables('endpointName')]",
          "type": "endpoints",
          "location": "[parameters('location')]",
          "apiVersion": "2016-04-02",
          "dependsOn": [
            "[variables('profileName')]",
            "[parameters('trafficManagerName')]"
          ],
          "tags": {
            "displayName": "[variables('endpointName')]"
          },
          "properties": {
            "originHostHeader": "[variables('trafficManagerHostName')]",
            "isHttpAllowed": true,
            "isHttpsAllowed": true,
            "queryStringCachingBehavior": "IgnoreQueryString",
            "contentTypesToCompress": [
              "text/plain",
              "text/html",
              "text/css",
              "application/x-javascript",
              "text/javascript"
            ],
            "isCompressionEnabled": true,
            "origins": [
              {
                "name": "[variables('originName')]",
                "properties": {
                  "hostName": "[variables('trafficManagerHostName')]"
                }
              }
            ]
          }
        }
      ]
    },

    {
      "apiVersion": "2017-03-01",
      "type": "Microsoft.Network/trafficmanagerprofiles",
      "name": "[parameters('trafficManagerName')]",
      "location": "global",
      "properties": {
        "trafficRoutingMethod": "[parameters('trafficRoutingMethod')]",
        "dnsConfig": {
          "relativeName": "[parameters('trafficManagerRelativeName')]",
          "ttl": 30
        },
        "monitorConfig": {
          "protocol": "HTTPS",
          "port": 443,
          "path": "/"
        },
        "endpoints": [
          {
            "name": "[concat(parameters('deploymentId'), '-cd-US-endpoint')]",
            "type": "Microsoft.Network/trafficManagerProfiles/azureEndpoints",
            "properties": {
              "endpointStatus": "Enabled",
              "targetResourceId": "[resourceId('Microsoft.Web/sites', variables('cdWebAppNameTidy'))]",
              "target": "[concat('Microsoft.Web/sites/', variables('cdWebAppNameTidy'))]",
              "weight": 1,
              "priority": 2,
              "endpointLocation": "[parameters('cd.ase.location')]"
            }
          },
          {
            "name": "[concat(parameters('deploymentId'), '-cd-EU-endpoint')]",
            "type": "Microsoft.Network/trafficManagerProfiles/azureEndpoints",
            "properties": {
              "endpointStatus": "Enabled",
              "targetResourceId": "[resourceId('Microsoft.Web/sites', variables('cmWebAppNameTidy'))]",
              "target": "[concat('Microsoft.Web/sites/', variables('cmWebAppNameTidy'))]",
              "weight": 1,
              "priority": 3,
              "endpointLocation": "[parameters('location')]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('cmWebAppNameTidy'))]",
        "[resourceId('Microsoft.Web/sites', variables('cdWebAppNameTidy'))]"
      ]
    },
    {
      "type": "Microsoft.Search/searchServices",
      "apiVersion": "[variables('searchApiVersion')]",
      "name": "[variables('searchServiceNameTidy')]",
      "location": "[parameters('location')]",
      "properties": {
        "replicaCount": "[parameters('resourceSizes').SearchService.Replicas]",
        "partitionCount": "[parameters('resourceSizes').SearchService.Partitions]"
      },
      "sku": {
        "name": "[toLower(parameters('resourceSizes').SearchService.SkuName)]"
      },
      "tags": {
        "provider": "[parameters('sitecoreTags').provider]"
      }
    }







  ],
	"outputs": {
    "infrastructure": {
      "type": "object",
      "value": {
        "sqlServerFqdn": "[reference(concat('Microsoft.Sql/servers/', variables('dbServerNameTidy'))).fullyQualifiedDomainName]",
        "webSqlServerFqdn": "[reference(concat('Microsoft.Sql/servers/', variables('webDbServerNameTidy'))).fullyQualifiedDomainName]"
      }
    }
  }
}
